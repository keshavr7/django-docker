"""
Django settings for www project.

Generated by 'django-admin startproject' using Django 1.8.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


def get_env_setting(var_name, default=False):
    """
    Get the environment variable or return exception
    :param var_name: Environment Variable to lookup
    """
    try:
        return os.environ[var_name]
    except KeyError:
        import StringIO
        import ConfigParser

        env_file = os.environ.get('PROJECT_ENV_FILE', os.path.join(os.path.dirname(BASE_DIR), '.env'))
        try:
            config = StringIO.StringIO()
            config.write("[DATA]\n")
            config.write(open(env_file).read())
            config.seek(0, os.SEEK_SET)
            cp = ConfigParser.ConfigParser()
            cp.readfp(config)
            value = dict(cp.items('DATA'))[var_name.lower()]
            if value.startswith('"') and value.endswith('"'):
                value = value[1:-1]
            elif value.startswith("'") and value.endswith("'"):
                value = value[1:-1]
            os.environ.setdefault(var_name, value)
            return value
        except (KeyError, IOError):
            if default is not False:
                return default
            from django.core.exceptions import ImproperlyConfigured

            error_msg = "Either set the env variable '{var}' or place it in your " \
                        "{env_file} file as '{var} = VALUE'"
            raise ImproperlyConfigured(error_msg.format(var=var_name, env_file=env_file))


################ STANDARD DJANGO STUFF


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.7/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env_setting('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


ALLOWED_HOSTS = []

# Internationalization
# https://docs.djangoproject.com/en/1.7/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',

    'jsoneditor', # https://c9.io/nnseva/django-jsoneditor/

    'core'
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
)

ROOT_URLCONF = 'www.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Database
# !!!! Patch PsycoPG !!!!
from psycogreen.gevent import patch_psycopg

patch_psycopg()
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases
import dj_database_url
DATABASES = {
    'default': dj_database_url.config(default=get_env_setting('DATABASE_URL'))
}

################ END STANDARD DJANGO STUFF


########## STATIC FILE CONFIGURATION
# From https://devcenter.heroku.com/articles/django-assets
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)
########## END STATIC FILE CONFIGURATION


########## LOGGING CONFIGURATION
# See: https://docs.djangoproject.com/en/dev/ref/settings/#logging
# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(process)d][%(thread)d]'
            '[%(levelname)-5s] [%(asctime)s] [%(filepath)-20s] '
            '[%(funcName)-20s] [%(lineno)-4d] -  %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'dev_logger': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'stg_logger': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'prod_logger': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
DEFAULT_LOGGER = 'dev_logger'
########## END LOGGING CONFIGURATION


########## REDIS CONFIG

import redis, urlparse
REDIS_URL = get_env_setting('REDISCLOUD_URL')
PARSED_REDIS_URL = urlparse.urlparse(REDIS_URL)
REDIS_HOSTNAME = PARSED_REDIS_URL.hostname
REDIS_PORT = PARSED_REDIS_URL.port
REDIS_PASSWORD = PARSED_REDIS_URL.password
REDIS_CONNECTION_POOL = redis.BlockingConnectionPool(
    host=REDIS_HOSTNAME,
    port=REDIS_PORT,
    db=0,
    password=REDIS_PASSWORD,
    socket_timeout=30,
    max_connections=int(get_env_setting('REDIS_MAX_CONNECTIONS')),
    timeout=int(get_env_setting('REDIS_BLOCKING_TIMEOUT')),
)

########## END REDIS CONFIG


########## CELERY CONFIGURATION
# Taken from CloudAMQP's documentation at
# https://www.cloudamqp.com/docs/celery.html
# !!! MAY NOT BE APPLICABLE FOR REDIS BROKERS ON LOCAL DEV LAPTOPS !!!
BROKER_URL = get_env_setting('BROKER_URL')
BROKER_POOL_LIMIT = 1               # Will decrease connection usage
BROKER_HEARTBEAT = None             # We're using TCP keep-alive instead
BROKER_CONNECTION_TIMEOUT = 30      # May require a long timeout due to Linux DNS timeouts etc
CELERY_RESULT_BACKEND = None        # AMQP is not recommended as result backend as it creates thousands of queues
CELERY_SEND_EVENTS = False          # Will not create celeryev.* queues
CELERY_EVENT_QUEUE_EXPIRE = 60      # Will delete all celeryev. queues without consumers after 1 minute.
CELERY_CONFIG = 'www.celeryconfig.local_celeryconfig'
########## END CELERY CONFIGURATION


###### JSON EDITOR ##########

# https://c9.io/nnseva/django-jsoneditor/
JSON_EDITOR_JS = 'https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/4.2.1/jsoneditor.js'
JSON_EDITOR_CSS = 'https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/4.2.1/jsoneditor.css'

###### JSON EDITOR ##########


######CORS SETTINGS##########

CORS_ORIGIN_WHITELIST = ()

######CORS SETTINGS##########
